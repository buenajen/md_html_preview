{"version":3,"file":"lib_index_js.069daf5920710f247415.js","mappings":";;;;;;;;;;;;;;;;;AACsE;AAER;AAE9D,MAAM,SAAS,GAAG,uBAAuB,CAAC;AAE1C,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,SAAS;IACb,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,iEAAe,EAAE,wEAAmB,CAAC;IAChD,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,cAAc;QACnC,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;QAEzB,MAAM,GAAG,GAAG,sBAAsB,CAAC;QACnC,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE;YACvB,KAAK,EAAE,yBAAyB;YAChC,OAAO,EAAE,KAAK,IAAI,EAAE;gBAClB,MAAM,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC;gBACpD,IAAI,CAAC,MAAM,EAAE;oBAAE,OAAO;iBAAE;gBACxB,MAAM,OAAO,GAAI,MAAc,CAAC,OAAmC,CAAC;gBACpE,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;gBAC1B,MAAM,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,EAAE;oBAC3D,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,CAAC;iBAC/B,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;QAEH,sCAAsC;QACtC,MAAM,MAAM,GAAG,IAAI,+DAAa,CAAC;YAC/B,SAAS,EAAE,iCAAiC;YAC5C,OAAO,EAAE,GAAG,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACzC,OAAO,EAAE,yBAAyB;SACnC,CAAC,CAAC;QACH,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IACrE,CAAC;CACF,CAAC;AAEF,iEAAe,MAAM,EAAC","sources":["webpack://md_html_preview/./src/index.ts"],"sourcesContent":["import { JupyterFrontEndPlugin } from '@jupyterlab/application';\nimport { ICommandPalette, ToolbarButton } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\n\nconst PLUGIN_ID = 'jupyterlab-md-preview';\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: PLUGIN_ID,\n  autoStart: true,\n  requires: [ICommandPalette, IFileBrowserFactory],\n  activate(app, palette, browserFactory) {\n    const { commands } = app;\n\n    const cmd = 'markdown:render-html';\n    commands.addCommand(cmd, {\n      label: 'Render Markdown to HTML',\n      execute: async () => {\n        const widget = browserFactory.tracker.currentWidget;\n        if (!widget) { return; }\n        const context = (widget as any).context as DocumentRegistry.Context;\n        const path = context.path;\n        await app.serviceManager.serverSettings.fetch('/md-preview', {\n          method: 'POST',\n          body: JSON.stringify({ path })\n        });\n      }\n    });\n\n    // Кнопка в toolbar файлового браузера\n    const button = new ToolbarButton({\n      iconClass: 'jp-MaterialIcon jp-MarkdownIcon',\n      onClick: () => { commands.execute(cmd); },\n      tooltip: 'Render Markdown to HTML'\n    });\n    browserFactory.defaultBrowser.toolbar.addItem('md-render', button);\n  }\n};\n\nexport default plugin;"],"names":[],"sourceRoot":""}